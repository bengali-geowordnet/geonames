<?php/** * GeoWordNet *  * A thesis project for three students at American international University Bangladesh.  * Supervised by Dr. Tabin Hasan, three undergraduate students - Farhan Ar Rafi, Sk. Golam Muhammad Hasnanin and  * Humayra designed this project.  *  * The thesis group also acknoledges the contribution of Shamim Ahmed, Dr. Abu Dayen and more to add.  *  * @package	GeoWordNet * @subpackage  Models * @author	Farhan Ar Rafi * @copyright	Copyright (c) 2014 - 2015, farhanarrafi@gmail.com * @license	http://opensource.org/licenses/MIT	MIT License * @link	http://www.farhanarrafi.com * @since	Version 1.0.0 * @filesource *//** * The geoname class is the main class for saving * data in the database. The table that this model * refers stores refined data. * * @author Farhan Ar Rafi farhanarrafi@gmail.com */class Geoname_class extends MY_Model {    const TABLE_NAME = 'geoname';    const TABLE_PK = 'geonameid';    /**     * integer id of record in geonames database     * @var int(11) NOT NULL      */    public $geonameid = 0;    /**     * Name of geographical point (utf8)      * @var varchar(400) DEFAULT NULL     */    public $name = null;       /**     * name of geographical point in plain ascii characters,      * varchar(200)     * @var varchar(400) DEFAULT NULL     */    public $asciiname = null;        /**     * alternatenames, comma separated, ascii names automatically      * transliterated, convenience attribute from alternatename      * table, varchar(10000)     * @var varchar(10000)/text DEFAULT NOT NULL     */    public $alternatenames = "";    /**     * latitude in decimal degrees (wgs84)     * @var      */    public $latitude = null;      /**     * longitude in decimal degrees (wgs84)     * @var type      */    public $longitude = null;    /**     * Feature class of a geoname entity     * @var char(1)     */    public $fclass = null;        /**     * Feature code of a geoname entity     * @var varchar(10)     */    public $fcode = null;        /**     * ISO-3166 2-letter country code, 2 characters     * @var char(2)     */    public $country = null;       /**     * alternate country codes, comma separated,      * ISO-3166 2-letter country code, 200 characters      * @var varchar(200)      */    public $cc2 = null;    /**     * fipscode (subject to change to iso code), see exceptions below, see file admin1Codes.txt for display names of this code; varchar(20)     * @var type      */    public $admin1 = null;        /**     * code for the second administrative division, a county in the US, see file admin2Codes.txt; varchar(80)      * @var type      */    public $admin2 = null;       /**     * code for third level administrative division     * @var varchar(20)     */    public $admin3 = null;            /**     * code for fourth level administrative division     * @var varchar(20)     */    public $admin4 = null;    /**     * The population of an area     * @var bigint (8 byte int)      */    public $population = null;    /**     * Elevation of an area, which is also defined as height from     * standard sea level.     * @var integer in meters     */    public $elevation = null;    /**     * digital elevation model, srtm3 or gtopo30, average elevation      * of 3''x3'' (ca 90mx90m) or 30''x30'' (ca 900mx900m) area in      * meters, integer. srtm processed by cgiar/ciat.     *      * @var integer area in meters     */    public $gtopo30 = null;       /**     * the timezone id (see file timeZone.txt)     * @link timeZone.txt     * @var varchar(40)      */    public $timezone = null;    /**     * date of last modification in yyyy-MM-dd format     * @var type      */    public $moddate = null;    public function __construct()    {            parent::__construct();    }}