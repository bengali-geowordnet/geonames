<?php/** * GeoWordNet *  * A thesis project for three students at American international University Bangladesh.  * Supervised by Dr. Tabin Hasan, three undergraduate students - Farhan Ar Rafi, Sk. Golam Muhammad Hasnanin and  * Humayra designed this project.  *  * The thesis group also acknoledges the contribution of Shamim Ahmed, Dr. Abu Dayen and more to add.  *  * @package	GeoWordNet * @author	Farhan Ar Rafi * @copyright	Copyright (c) 2014 - 2015, farhanarrafi@gmail.com * @license	http://opensource.org/licenses/MIT	MIT License * @link	http://www.farhanarrafi.com * @since	Version 1.0.0 * @filesource *//** * This class is used to acess user information in the database. * This user is not just a normal user but includes developers who  * use our API and device owners that use our APPLICATIONS. *  * @author Farhan */class User_class extends MY_Model {    const TABLE_NAME = 'user_info';    const TABLE_PK = 'userid';    /**     *     * @var int(11) NOT NULL     */    public $userid = 0;    public $username = "";    public $email = "";    public $password = "";    public $token = "";            public function __construct() {        parent::__construct();    }        public function get() {        $array = array('username' => $this->username);        $this->db->where($array);        $query = $this->db->get($this::TABLE_NAME);        $db_row = $query->row();        $this->username = $db_row->username;        $this->email = $db_row->email;        $this->token = $db_row->token;        return $this;    }        /**     * This functions generates a random token each time it is called.      *      * @return string Returns a SHA1 hash string of a token generated by the server.     */    private function generateToken() {        $string = "" . $this->username . rand() . microtime();        $token = hash('sha1',$string);        return $token;    }        public function createNewUser() {        //var_dump($this);        $array = array('email' => $this->email, 'username' => $this->username);        if($this->checkIfExists($array)) {            $this->output->set_header('HTTP/1.1 409 CONFLICT');            return false;        }        $this->token = $this->generateToken();        $this->userid = $this->getNextID();        $this->insert();        return true;    }    /**     * This function validates user information     * against the database.     * @return boolean     */    public function validateUser() {        $array = array('email' => $this->email, 'token' => $this->token);        $this->db->where($array);        $this->db->limit(1);        $this->db->from($this::TABLE_NAME);        $row_num = $this->db->count_all_results();        if($row_num> 0) {            return TRUE;        } else {            return FALSE;        }    }        public function getUser() {        $array = array('email' => $this->email);        $this->db->where($array);        $this->db->limit(1);        $this->db->from($this::TABLE_NAME);        $query = $this->db->get();                $row = $query->result()[0];        //var_dump($row);        $this->userid = $row->userid;        $this->email = $row->email;        $this->token = $row->token;        return $this;            }        public function validateLogin() {        $array = array('username' => $this->username, 'password' => $this->password);        $this->db->where($array);        $this->db->limit(1);        $this->db->from($this::TABLE_NAME);        $row_num = $this->db->count_all_results();        if($row_num> 0) {            return TRUE;        } else {            return FALSE;        }    }            /**     * This function checks if an username already exists.     * @param type $username     * @return boolean     */    public function userNameIsUnique($username) {        $array = array('username' => $username);        if($this->checkIfExists($array)) {            return false;        }        return true;    }        /**     * This function checks if an email address already exists.     * @param type $email     * @return boolean     */    public function userEmailIsUnique($email) {        $array = array('email' => $email);        if($this->checkIfExists($array)) {            return false;        }        return true;    }    }